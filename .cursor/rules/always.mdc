---
description: 
globs: 
alwaysApply: true
---
# google-cloud-pubsub-visualizer - 構成概要

このアプリケーションは、Google Cloud 上の Pub/Sub コンポーネント（topics / subscriptions）を視覚的にわかりやすく表示する Web アプリケーションです。

## 技術スタック

- フロントエンド: React + TypeScript
- バンドラー: Vite + SWC
- UI ライブラリ: shadcn/ui
- 認証: Google OAuth2 (PKCE フロー)
- API 呼び出し: Google API Client Library (`gapi`)
- 実行環境: Dev Container (VS Code 用)

---

## 主な機能

### 1. Google アカウントでのログイン

- Google Cloud の OAuth2 認証を使用（Firebase Authentication は使用しない）
- クライアント側のみで完結する PKCE フローを採用
- ユーザーがログインするとアクセストークンを取得し、Google Cloud API にアクセス可能になる

### 2. プロジェクト選択

- ログイン後、`cloudresourcemanager.projects.list` API を使用してユーザーがアクセス可能な GCP プロジェクトの一覧を取得
- UI 上でセレクトボックスに表示し、プロジェクトを1つ選択できるようにする

### 3. Pub/Sub コンポーネントの取得と表示（後続機能）

- 選択されたプロジェクトに対して `pubsub.projects.topics.list` と `pubsub.projects.subscriptions.list` を呼び出し、Pub/Sub の構成を取得
- トピックとサブスクリプションの関係を可視化（例: グラフビュー）
- データはリアクティブに更新可能にする（ポーリングまたは手動更新）

---

## 注意点・要件

- 使用スコープは必要最小限に制限（例: `https://www.googleapis.com/auth/cloud-platform.read-only`）
- GCP 側で「Cloud Resource Manager API」および「Pub/Sub API」を有効化しておく必要がある
- セキュリティ上、アクセストークンの保存は `sessionStorage` を基本とし、永続化しない方針
- gapi の初期化は認証後に必要（`gapi.load('client')` → `gapi.client.init()`）
- devcontainer での開発なので、 ローカルで開発を行うにあったって公開可能な環境変数は .devcontainer/.env に格納すること
  - 公開不可能な情報は、 .devcontainer/.env.local に保存する。このファイルは gitignore されているので、 .env.local.template に環境変数のリストを追加すること
- Tailwind 等の css ライブラリは AI が対応できないため使わないこと

---

## ディレクトリ・ファイル構成ルール

### ディレクトリ構造

```tree
src/
├── pages/           # ページコンポーネント（ルートレベルのページ）
│   ├── home/        # ホームページ
│   ├── auth-callback/ # 認証コールバックページ
│   ├── auth-error/  # 認証エラーページ
│   └── logout/      # ログアウトページ
├── components/      # 再利用可能なコンポーネント
│   ├── button/      # ボタン関連コンポーネント
│   ├── icon/        # アイコンコンポーネント
│   └── [feature]/   # 機能別コンポーネント
├── contexts/        # React Context
├── lib/            # ライブラリ・ユーティリティ
├── types/          # TypeScript型定義
├── utils/          # ユーティリティ関数
└── assets/         # 静的アセット
```

### ファイル命名規則

#### ページコンポーネント（pages/配下）

- 各ページは独立したディレクトリを作成
- ディレクトリ名は kebab-case（例: `auth-callback`）
- メインコンポーネントは `index.tsx` に実装
- CSSファイルは `index.css` に配置
- エクスポート用に `index.ts` を作成
- `Page` サフィックスは不要（pages配下なので自明）

```tree
pages/home/
├── index.ts      # エクスポート: export { HomePage } from "./index.tsx"
├── index.tsx     # メインコンポーネント
└── index.css     # スタイル
```

#### 再利用可能コンポーネント（components/配下）

- ファイル名は PascalCase（例: `Header.tsx`）
- CSSファイルは同名の `.css` ファイル（例: `Header.css`）
- 機能別ディレクトリに分類（例: `button/`, `icon/`）

```tree
components/
├── button/           # ボタン関連コンポーネント
│   ├── index.ts      # エクスポート
│   ├── Button.tsx    # 汎用ボタン
│   ├── Button.css    # ボタンスタイル
│   ├── GoogleAuthButton.tsx  # Google認証ボタン
│   └── GoogleAuthButton.css  # Google認証ボタンスタイル
├── icon/             # アイコンコンポーネント
│   ├── index.ts      # エクスポート
│   └── GoogleIcon.tsx # Googleアイコン
└── [feature]/        # その他の機能別コンポーネント
```

### コンポーネント実装ルール

#### ページコンポーネント

- `pages/` 配下のコンポーネントはルートレベルのページを表す
- 各ページは独立したディレクトリに配置
- ページ固有のサブコンポーネントは同じディレクトリ内に配置可能
- エクスポートは `index.ts` で行い、コンポーネント名は `Page` サフィックス付き

#### 再利用可能コンポーネント

- `components/` 配下のコンポーネントは複数の場所で使用される汎用コンポーネント
- 単一責任の原則に従い、明確な役割を持つ
- Props の型定義は `types/` ディレクトリに配置

#### 機能別コンポーネント分類

- **button/**: ボタン関連のコンポーネント（Button, GoogleAuthButton等）
- **icon/**: アイコンコンポーネント（GoogleIcon等）
- **[feature]/**: その他の機能別コンポーネント

### インポート・エクスポート規則

#### ページコンポーネントのインポート

```typescript
// 正しい例
import { HomePage } from "@/pages/home";
import { AuthCallbackPage } from "@/pages/auth-callback";

// 間違った例
import { HomePage } from "@/pages/HomePage";
import { HomePage } from "@/pages/home/index";
```

#### コンポーネントのエクスポート

```typescript
// pages/home/index.ts
export { HomePage } from "./index.tsx";

// components/button/index.ts
export { Button } from "./Button";
export type { ButtonProps } from "./Button";
export { GoogleAuthButton } from "./GoogleAuthButton";

// components/icon/index.ts
export { GoogleIcon } from "./GoogleIcon";
```

#### 機能別コンポーネントのインポート

```typescript
// 正しい例
import { Button } from "@/components/button/Button";
import { GoogleAuthButton } from "@/components/button/GoogleAuthButton";
import { GoogleIcon } from "@/components/icon";

// 間違った例
import { Button } from "@/components/ui/Button";
import { GoogleIcon } from "@/components/GoogleIcon";
```

### CSS ファイル配置

- 各コンポーネントの CSS ファイルは同じディレクトリに配置
- グローバルスタイルは `src/index.css` に配置
- コンポーネント固有のスタイルは対応するコンポーネントと同じディレクトリに配置

### ボタンコンポーネント設計

- **Button**: 汎用ボタンコンポーネント（primary, secondary, text バリアント）
- **GoogleAuthButton**: Google認証専用ボタン（Buttonをラップ）
- ボタンは `components/button/` 配下に配置
- 各ボタンコンポーネントは対応するCSSファイルを持つ

---

## 今後の拡張案

- Pub/Sub リソースの検索・フィルタ
- サブスクリプションの詳細（AckDeadline, Push/ Pull, DeadLetter 等）の表示
- グラフ構造へのドラッグ操作やレイアウト調整
- Pub/Sub メッセージの送受信機能（テスト用）

---

## 追加ルール

- コードを変更した場合 lint を実行し警告やエラーがある場合は解消を試みること
- --fix フラグで修正可能なものは `npm run fix` で修正すること

description:
globs:
alwaysApply: false
